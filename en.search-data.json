{"/about/":{"data":{"":"","mission#Mission":"To help companies and individuals, in overcoming the barriers posed by the foundational need of any software system,\nthat of keeping data safe. Standards and technologies decomposed in concepts, ideas, techniques, and mechanisms on the\nidentity and access management (IAM) space are the tools to achieve the goal.","services#Services":" Consulting Education Tech Talk Coaching Areas of Expertise Standards FIDO2 Open ID Connect OAuth2 NIST 800-56 (Key Establishment) NIST 800-63 (Digital Identity) KYC (Identity Verification) … Technical Domains Identity Management Authentication Authorization Session … Architecture High and Low Level Design Platforms Services Frameworks … For any inquires, please reach out to info@bitscrafter.com","social-media#Social Media":" x.com/bitscrafter youtube.com/@bitscrafter linkedin.com/company/bitscrafter ","what-is-bitscrafter#What is Bitscrafter?":"Bitscrafter is the place where topics to address this mission are introduced and discussed. As such, its intention is to spark the curiosity of the reader and/or viewer to initiate conversations on how to go about solving common IAM problems.\nWhat’s in the name? Similar to an artist, a software engineer is a craftsperson dealing with the intricacies of what is required to produce something worthwhile. The craftsperson must not only have the vision but also the knowledge and perseverance of working on the bits and pieces to make sense of the whole.","who-we-are#Who we are":"Luis Rios linkedin.com/in/jlrios\nSeasoned technologist with over 25 years of experience, having worn the hats of subject matter expert, software architect, software engineer, mentor, technical leader, entrepreneur, and product owner. Adept at creating innovative and high-quality solutions that stand the test of time. Sought-after authority in the identity and access management domain, including industry standards such as OAuth2, OpenID Connect, Key Establishment, and FIDO2 that permeate to areas such as security, key agreement, authentication, authorization, session management, data privacy, consent management, identity verification, as well as user and entity behavioral analytics. Professional Experience A short summary of past experience "},"title":"About"},"/blogs/":{"data":{"":"","topics#Topics":"Key Establishment End to End Secure Data Transmission An introduction to end to end encryption Trust Bootstrapping Trust Bootstrapping, a Security Pillar Establishing the trust of a digital relationship "},"title":"Blogs"},"/blogs/end_to_end_secure_data_transmission/":{"data":{"":"","conclusion#Conclusion":"Given the evolving nature of cyberattacks and increasing data privacy regulations, addressing end-to-end traffic protection is crucial for any digital service relying on data transmission. This article presented proven industry practices, concepts, and considerations for solving this common problem.\nThe key security properties that data in transit must have:\nAuthenticity. Tamper Proof (Integrity and Confidentiality). Non-Repudiation. Perfect Forward Secrecy. These security properties can be achieved by:\nEstablishing a Trust Relationship. Defining and Executing a Key Agreement Procedure. ","disclaimer#Disclaimer":"All content provided in this article is exclusively for informational purposes only. The source for the making of this content is information of public domain as detailed in the references.\nThe owner of this article makes no representations as to the accuracy or completeness of any information presented. The owner will not be liable for any errors or omissions in this information nor for its availability, as well as not liable for any losses or damages resulting from the use of this information.","introduction#Introduction":"Service providers and their technologies have been increasingly scrutinized by governments and the public due to the unfortunate consequences of their security practices—or lack thereof. One critical area to secure is commonly referred to as data-in-transit. Transmitting data over the internet, or any unsecured network, comes with inherent risks that can’t be ignored.\nUnauthorized access to transmitted data is possible through an attack known as a man-in-the-middle (MITM). As the name suggests, a malicious actor intercepts communication between two parties to gain some benefit. There are many ways these attacks can occur; however, for brevity, we’ll assume unauthorized data access is both feasible and highly probable.\nThe solution prevents anyone intercepting the communication from understanding or manipulating the intercepted messages, regardless of the type of MITM attack. This is achieved using well-known cryptographic techniques that guarantee the authenticity, integrity, and confidentiality of the transmitted messages.","making-progress#Making Progress":"Let’s break down a partial solution for the first property: preventing unauthorized parties from reading or modifying the message. Encryption can prevent unauthorized reading, while a signature or a digest can prevent tampering. However, these primitives require a secret. Using a pre-agreed long-lived secret works, but what if it gets compromised? Introducing ephemerality and randomness to the secret can address this concern.\nMessages thus must show an additional property:\nThey have perfect forward secrecy, meaning a compromised session key affects only the messages protected with that key and a compromised long-lived key doesn’t affect any previously protected messages. Using a key exchange primitive, the Sender and Receiver can generate a common value. The output of the key exchange should not be used as the secret itself but as input to a key derivation method that uses a pseudo-random function (PRF) to generate the actual secret that becomes the session key.\nTo tackle tampering and forward secrecy, a key agreement procedure using key exchange and PRF primitives is needed. Figure 2 illustrates this idea.\nFigure 2 While the transmitted message is guaranteed to be protected end to end strictly speaking, the Attacker might have intercepted the previous messages carrying the key agreement material and thus enabling the manipulation of the procedure in a way that goes unnoticed by the Sender and Receiver. In this scenario, the Attacker effectively becomes the Sender, the Receiver, and/or simply an intermediary that understands the communication and thus can act on it.\nThis attack is attainable because neither the Sender nor Receiver are authenticated as the absence of long-lived keys would suggest. Even if they each hold their ephemeral private key, the Attacker could neglect this by generating its own ephemeral key pair impersonating the participation of the Sender or Receiver or both.","references#References":" Elaine Barker (NIST), Lily Chen (NIST), Allen Roginsky (NIST), Apostol Vassilev (NIST), Richard Davis (NSA). NIST, “Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography”, Revision 3, April 2018, csrc.nist.gov/pubs/sp/800/56/a/r3/final Elaine Barker (NIST), Lily Chen (NIST), Richard Davis (NSA). NIST, “Recommendation for Key-Derivation Methods in Key-Establishment Schemes”, Revision 2, August 2020, csrc.nist.gov/pubs/sp/800/56/c/r2/final Lily Chen (NIST). NIST, “Recommendation for Key Derivation Using Pseudorandom Functions”, Revision 1 Update 1, August 2022, csrc.nist.gov/pubs/sp/800/108/r1/upd1/final H. Krawczyk (IBM Research), P. Eronen (Nokia). IETF, “HMAC-based Extract-and-Expand Key Derivation Function (HKDF)”, May 2010, datatracker.ietf.org/doc/html/rfc5869 ","the-analysis#The Analysis":"To solve this problem, we need a mechanism by which both ends of the communication can assert that the messages show the following properties:\nThey can’t be tampered with, ensuring the original message is not read before it reaches the receiver unchanged. They are authentic, confirming the message was created by the sender and was intended for the receiver. They can’t be repudiated, meaning the participants can’t deny having sent or received them. They exhibit forward secrecy, ensuring the compromise of a secret does not compromise other message exchanges. ","the-problem#The Problem":"The scenario in this discussion centers securing the communication across the internet between two participants. The issue at hand is that someone other than the intended participants could access the message and benefit from this knowledge. Below, Figure 1 illustrates a simplification of this scenario.\nFigure 1 Attackers can inject themselves into three logical places: local networks and the internet. To define a sensible solution, we must assume no place is safe once the message leaves the application’s memory space. Vulnerabilities can exist in any underlying protocols and technologies used to transmit the message.","the-solution#The Solution":"Now, let’s address the authenticity aspect. Without authentication, the Sender and Receiver don’t know who they’re communicating with. They must establish a trust mechanism where participants verify each other’s identity before any interaction. This trust establishment involves exchanging:\nA public key. Proof of possession of the associated private key. Key agreement procedure parameters. Trust can be established directly (e.g., face-to-face interactions) or indirectly (e.g., through a trusted Certificate Authority). Figure 3 describes this solution.\nThe use of authenticity unveils a fourth desired property to messages flowing between the participants:\nOnce done, a participant cannot deny their participation in the message exchange. This is accomplished by participants demonstrating possession of a private key.\nFigure 3 Participants must set up long-lived secrets in secure places like Trusted Platform Modules (TPMs) or Hardware Security Modules (HSMs). This ensures only the intended application accesses the secret. In some contexts, it might be acceptable for only one participant to be authenticated."},"title":"End to End Secure Data Transmission"},"/blogs/trust_bootstrapping_secure_foundation_for_interactions/":{"data":{"":"","conclusion#Conclusion":"Trust bootstrapping is critical for creating secure digital environments. By verifying identities, managing trusted\ncredentials, and establishing robust trust relationships, we can ensure safe and reliable interactions. As cyber threats\nevolve, trust bootstrapping will remain a cornerstone of cybersecurity strategies, enabling secure communication and\ntransactions in an increasingly connected world.","disclaimer#Disclaimer":"All content provided in this article is for informational purposes only. The source of this content is public domain\ninformation as detailed in the references. The owner makes no representations regarding the accuracy or completeness of\nthe information presented. The owner will not be liable for any errors or omissions in this information or its\nvailability, nor for any losses or damages resulting from its use.","introduction#Introduction":"In today’s dynamic cybersecurity landscape, pre-establishing trust before any interaction is essential. Trust\nbootstrapping is the process that sets up a trust relationship between two or more subjects by proofing the identities\nclaimed by those subjects. The sensitivity of the data or transactions between these subjects dictates the stringency of\nthe trust establishment process.","references#References":" David Temoshok (NIST), Diana Proud-Madruga (Electrosoft), Yee-Yin Choong (NIST), Ryan Galluzzo (NIST), Sarbari Gupta (Electrosoft), Connie LaSalle (NIST), Naomi Lefkovitz (NIST), Andrew Regenscheid (NIST), “Digital Identity Guidelines”, Revision 4, 2nd Public Draft, 21 August 2024, csrc.nist.gov/pubs/sp/800/63/4/2pd T. Lodderstedt (sprind.org), D. Fett (Authlete), M. Haine (Considrd.Consulting Ltd), A. Pulido (Santander), K. Lehmann (1\u00261 Mail \u0026 Media Development \u0026 Technology GmbH), K. Koiwai (KDDI Corporation), “OpenID Connect for Identity Assurance 1.0”, 1 October 2024, openid.net/specs/openid-connect-4-identity-assurance-1_0.html ","the-analysis#The Analysis":"Trust is essential for secure interactions. Before any sensitive data exchange or transaction, trust must be established to ensure all parties can interact confidently without fear of unauthorized access or tampering.\nTrust bootstrapping involves several steps to create a secure and reliable trust relationship:\nIdentity Proofing: Collect evidence to validate and verify the trustworthiness of a subject. Digital Credential Creation: Create a digital credential, associated to the proofed identity, to facilitate future identification of the subject. Trust Relationship Formalization: Exchange public credentials to establish the trust relationship between subjects. ","the-bootstrapping-process#The Bootstrapping Process":"Trust bootstrapping, or trust establishment, is a universal concept used in well-established technologies like TLS, Key Agreement, API, as well as emerging ones such as UEFI, FIDO2, and Verifiable Credentials. For example, bootstrapping in TLS might involve adding root certificates to a trust store, while in an API authentication, it might involve storing public keys or secrets in a data repository.\nThe bootstrapping process starts with identity proofing, which involves collecting identity evidence to validate and verify it. This evidence can be any official document, physical or digital, that asserts the subject’s identity attributes. The issuer of this evidence becomes the anchor of trust, meaning the subject’s identity is as trustworthy as the issuer. Examples of such entities include governments, educational institutions, and certificate authorities. Validation checks that the evidence meets the requirements for its type, such as ensuring a passport includes all expected data and is correctly formatted. Verification ensures the subject undergoing identity proofing matches the subject described in the evidence.\nOnce the identity is verified, the next step is creating a credential that binds the verified identity with an authenticator and, generally, cryptographic material. When the bootstrapping is complete, this credential is used to exercise trust in future interactions. Successful authentications indicate the subject with the verified identity is behind the interaction.\nThe final step defines the characteristics of the relationship, including the participant subjects, the required identity assurance level, whether trust is required from both subjects or only one, etc.","the-problem#The Problem":"When two subjects initiate an interaction requiring a certain level of confidence, merely authenticating them might not\nsuffice. The true identity of the subjects becomes crucial. Are they genuinely who they claim to be?"},"title":"Trust Bootstrapping"},"/courses/":{"data":{"":"","ûdemy#Ûdemy":"Free FIDO Core Principles https://www.udemy.com/course/bitscrafter-fido-core-principles "},"title":"Courses"},"/products/":{"data":{"":"","web-of-trust#Web of Trust":" Web of Trust An overview of web of trust "},"title":"Products"},"/products/overview_web_of_trust/":{"data":{"":"\nPatent Pending ","participating-entities#Participating Entities":"The Web of Trust ecosystem comprises multiple entity types organized in three concentric layers: External (where third-party entities provide trust services), Identity \u0026 Relationships (where organizations and users establish verified identities and relationships), and Web of Trust (where WoT mediates relationships, consent, and data access).\nFigure 3 - Participating Entities Entity Categories The participating entities are organized into two primary categories:\nRegistered Entities: Digital identities established and managed by WoT, including organizations, users, and their delegated entities (agents, applications, services, devices). These entities can form relationships, grant consent, and access or provide data within the trusted ecosystem.\nSupporting Entities: External entities that provide trust establishment, consent management, and data access services. These entities operate independently of WoT but integrate with the system to enable its comprehensive trust framework.\nRegistered Entities User Entities\nUser: Individual entity that owns personal data and establishes relationships with organizational entities requiring data access. Users have:\nPersonal preferences and privacy requirements that inform consent decisions Legal rights under privacy regulations (GDPR, CCPA, HIPAA) that the system must respect Multiple concurrent relationships with different organizations and their entities Authentication capabilities through FIDO2/WebAuthn credentials Users authenticate using FIDO2 authenticators that provide:\nCryptographic proof of user verification (biometric or PIN confirmation) Device possession verification (authenticator security) Explicit consent binding (cryptographically tied to user verification) Users may undergo optional identity verification through external providers, with verification status affecting which relationship types they can establish. Even without formal verification, FIDO2 authentication establishes cryptographic proof that the current user is the same person who registered the account and possesses the registered device, providing the foundation for consent and authorization decisions.\nUser Device: Physical or virtual device entity owned by an individual (smartphone, tablet, laptop). User devices:\nEstablish and maintain secure execution environment based on device authentication credentials stored in consumer crypto modules (FIDO2 authenticators, Keychain, Keystore, platform security modules) Host user applications and store user credentials Maintain security boundaries between applications to protect credential isolation Optional registration with WoT enables enhanced security posture through device-level authentication Organization Entities\nAll organizational entities authenticate using asymmetric cryptography, providing cryptographic proof of entity identity and private key possession. Private keys must be stored and managed through secure crypto modules (HSM, TPM, Keychain) to prevent unauthorized access and enable non-repudiation.\nOrganization: Business entity that offers software entities (agents, applications, services) to perform tasks for users. Organizations:\nUndergo mandatory identity verification through external trust anchors to establish WoT registration Establish cryptographic credentials verified through trust chains from Certificate Authorities, OpenID Federation, or KYB providers Create and own delegated entities that inherit organizational trust while maintaining independent authentication credentials Assume legal liability for actions of their delegated entities through cryptographic attestation of ownership Maintain organizational policies governing entity behavior, data handling, and relationship management Agent: Software entity that operates with varying degrees of independence on behalf of an organization to provide services to users. Agents can make context-driven decisions and take actions within well-defined parameters, making them particularly suitable for AI-powered services that require adaptive behavior. Agents:\nMake decisions and take actions within parameters established by relationship constraints and organizational policies Operate across multiple platforms and interact with other agents, applications, or services with varying degrees of independence, from fully independent to human-supervised operation May require dynamic access to contextual data from multiple sources to support decision-making and adaptive behavior Must obtain explicit user authorization to access data according to their operational requirements Cryptographically sign all data access requests with credentials derived from organizational trust Agents represent the primary use case driving WoT’s design, as AI agents particularly benefit from dynamic data access capabilities, cross-organizational operation support, and verifiable accountability mechanisms that enable independent operation while maintaining user control.\nApplication (App): Software entity with specific functionality that operates on behalf of an organization to provide services to users. Applications:\nTypically have defined user interfaces and operate within single platforms or environments Execute predetermined functions with well-defined behavior patterns Require explicit authorization to access user data based on functional requirements Authenticate using organizational crypto module credentials inherited from parent organization Service (Svc): Backend software entity that provides specific functionality without direct user interaction. Services:\nOperate continuously or on-demand to process data, perform computations, or integrate systems May be invoked by applications, agents, or other services Require explicit authorization when processing user data Cryptographically authenticate using credentials establishing organizational ownership Organization Device: Physical or virtual device entity representing server infrastructure or enterprise hardware owned by an organization. Organizational devices:\nEstablish and maintain secure execution environment based on authentication credentials stored in enterprise crypto modules (HSM, TPM, secure enclaves) Host multiple agents, applications, or services with isolated execution environments Maintain security boundaries between organizational entities Authenticate using crypto module credentials proving device identity and authorization Supporting Entities Supporting entities operate in external layers and provide essential services that WoT integrates into its trust framework. These entities are grouped by the lifecycle phases where they participate.\nTrust Establishment Phase\nTrust Anchor (TA): Root authority in a trust hierarchy that establishes foundational trust. Trust Anchors include:\nCertificate Authorities (CA) in X.509 PKI ecosystems Trust anchors in OpenID Federation hierarchies Other recognized sources of cryptographic identity verification Trust Anchors:\nProvide cryptographic validation of identity claims and credentials Issue signed attestations (certificates, entity statements) binding identities to public keys Operate independently of WoT as external sources of trust Enable verification without requiring online connectivity to the anchor (through signature validation) Identity Verification Provider (IVP): External service that verifies the legal or real-world identity of users or organizations. IVPs:\nPerform identity proofing through document verification, biometric checks, or authoritative database queries Execute Know Your Customer (KYC) verification for individuals Execute Know Your Business (KYB) verification for organizations Issue verification attestations that WoT uses to establish verified identity status Provide evidence documentation supporting verification decisions (identity documents, verification methods, assurance levels) Verifiable Credential Issuer (VCI): Entity that issues cryptographically signed credentials attesting to specific claims. VCIs:\nIssue credentials conforming to W3C Verifiable Credentials Data Model or related standards Sign credentials with issuer’s private key enabling independent verification Include identity attributes, organizational affiliations, certifications, or permissions in credentials Enable credential holders to present claims to relying parties without contacting issuer Support decentralized identity verification models Consent Formulation Phase\nIdentity Provider (IdP): External service that manages user authentication and authorization for data access. IdPs:\nImplement OAuth 2.0 and OpenID Connect protocols Authenticate users to verify data ownership before authorizing access Present standard OAuth 2.0 consent interfaces for authorization decisions Issue access tokens to authorized clients (WoT in this system) for subsequent data retrieval Manage token lifecycle (issuance, renewal, revocation) according to OAuth 2.0 specifications Work with Data Providers to enforce access control decisions based on user consent Examples of IdPs include Google Identity Services, Microsoft Entra ID, Apple Authentication Services, and other major identity providers.\nData Access Authorization Phase\nData Provider (DP): External entity that hosts or controls user data that organizational entities wish to access. Data Providers:\nImplement access control mechanisms validating authorization tokens before releasing data Accept OAuth 2.0 access tokens issued by IdPs as proof of authorization Respond to authorized data requests based on token scope and user consent parameters May be operated by the same organization as the IdP or be separate entities Maintain their own security policies and access controls Log data access for their own audit and compliance purposes Data Providers trust IdP-issued tokens rather than establishing direct trust relationships with every potential client.\nEntity Relationships These entities interact across the three trust layers:\nExternal Trusted Root, Consent \u0026 Data Access: Trust Anchors, Identity Verification Providers, and Verifiable Credential Issuers establish foundational trust for initial registration. Identity Providers manage OAuth2 authorization, while Data Providers host user data and enforce access control.\nTrusted Identity \u0026 Relationship: Organizations and Users register with WoT using credentials verified by the External Trusted Root, then form explicit relationships defining scopes, constraints, and permissions for data access.\nTrusted Web: This layer brings everything together—Organizations’ delegated entities (Agents, Applications, Services, Devices) use established relationships to request data access, navigate WoT’s consent framework, obtain IdP authorization, and retrieve data from Data Providers, all mediated by WoT’s orchestration.\nWoT orchestrates interactions between these entities, ensuring that trust established in external systems flows through relationship formation and granular consent to secure data access decisions within the trusted web.","problem-statement#Problem Statement":"Contextual data to deliver personalized experiences constitutes an essential need of modern digital ecosystems that increasingly rely on autonomous software entities—including AI agents, applications, and services. This data is often sensitive and owned by individuals or organizations. However, enabling these autonomous entities to access such data dynamically at scale, in a secure manner, and while preserving privacy and transparency across multi-entity operations, presents fundamental challenges that existing industry standards fail to adequately address.\nThree fundamental challenges prevent autonomous entities from operating securely at scale:\nFigure 1 - Problem Statement Scalable Dynamic Data-Access: Agents dynamically encounter new data sources during operation based on evolving processing needs, making pre-established relationships increasingly impractical to scale when serving millions of users across potentially hundreds or thousands of data providers\nOn-the-Fly Trust Verification: Without pre-established trust credentials, each data provider must independently verify an autonomous entity’s legitimacy and trustworthiness on-the-fly prior to authorizing data access, but traditional manual verification processes cannot scale to real-time requirements, creating redundant overhead and operational bottlenecks across data providers\nMulti-Entity Data-Processing Transparency: Autonomous operations typically involve multiple entities working together—agents coordinating with third-party services, LLMs, and data processors—yet users lack visibility into this processing chain, cannot grant granular permissions to each participant, or maintain accountability for operations across the ecosystem\nAI Agent View Autonomous entities face a critical operational constraint: they must access sensitive data from numerous providers to function effectively, yet each provider requires confidence in the entity’s trustworthiness. Traditional approaches require manual registration with each data provider—establishing credentials, undergoing verification, and negotiating access terms. This model fails at scale: an agent serving millions of users cannot feasibly pre-register with every potential data source, especially when processing requirements emerge dynamically during operation.\nUser View Users face dual challenges when engaging autonomous entities. First, before granting data access, they must evaluate an unknown agent’s legitimacy, organizational backing, and security practices—yet lack mechanisms to verify these claims. Second, users remain unaware of the complete processing chain, exposing their data to unknown third-party services, LLMs, and processors without explicit consent. This opacity prevents assessing privacy risks or establishing accountability, leaving users unable to protect their privacy or exercise meaningful control.\nData Provider View Data providers face a real-time verification challenge: they must dynamically evaluate an entity’s trustworthiness at the moment of first data access request, often without prior relationship or interaction history. Current approaches lack common industry-adopted, programmatic mechanisms to verify an unknown entity’s legitimacy, organizational backing, and user authorization in real-time. This forces data providers to choose between denying access (blocking legitimate use cases) or implementing manual registration processes that cannot scale for autonomous operations.\nSolving these three interconnected challenges—scalable dynamic data access, on-the-fly trust verification, and multi-entity transparency—requires a comprehensive framework that enables dynamic trust establishment, real-time verification, and transparent multi-entity coordination while maintaining user control and cryptographic accountability throughout the data lifecycle.","system-overview#System Overview":"The Web of Trust (WoT) system addresses the challenges outlined in the problem statement by creating a comprehensive framework for managing trust, relationships, consent, and data access across organizations, users, autonomous entities, traditional applications, and services.\nWoT operates as a trusted intermediary that integrates existing trust establishment mechanisms (e.g., X.509 Certificate Chains, OpenID Federation) with OAuth2/OIDC protocols while extending them to support dynamic autonomous entity operations, explicit multi-party relationships, granular consent management, and cryptographically accountable data access throughout the entire lifecycle.\nFigure 2 - System Overview Details The diagram illustrates WoT’s end-to-end operation through four interconnected phases:\n1.a. Organizational Trust Establishment: Organizations undergo identity verification through external trust anchors (X.509, OpenID Federation) or WoT-orchestrated processes, resulting in verified WoT registration with cryptographic credentials. Once registered, organizations can create delegated entities (agents, applications, services) that inherit trust from the parent organization while maintaining their own authentication credentials and operational independence. Each organizational entity generates cryptographic key pairs and registers their public keys with WoT, with a strong recommendation for their private keys to be managed through secure crypto modules (e.g., HSM, TPM, Keychain) for subsequent authentication.\n1.b. User Trust Establishment: Users establish their identity through FIDO2/WebAuthn authentication, with optional identity verification for enhanced trust relationships. Users can register with or without verified identity, though verification enables access to more trust-sensitive interactions. Even without formal identity verification, the FIDO2 authenticator provides cryptographic proof that the current user is the same person who registered the account and possesses the registered device, establishing the foundation for subsequent consent and authorization decisions.\n2. Trustworthy Relationship Formation: Organizations and users, having already established their trust credentials independently, can now form explicit relationships within WoT. Prior to approving any relationship, WoT verifies the requested relationship parameters against the parties’ pre-existing trust establishment proofs and credentials. WoT registers approved relationships with defined scopes, constraints, and cryptographic accountability, enabling subsequent mediation of consent and data access requests based on these pre-established trust relationships.\n3a. WoT Consent Formulation: When an organizational entity requests access to user data, WoT implements a two-layer consent architecture. In the WoT layer, WoT presents a granular consent request providing detailed information about which specific organizational entities (not just the parent organization) will access data, what specific data types each entity requires, conditions and constraints on data usage, evidence of why these entities are trustworthy based on their verified credentials and relationship parameters, and the purpose and duration of data access. Users can grant, deny, or conditionally approve consent with fine-grained control over data sharing across multiple entities.\n3b. IdP Consent Formulation: In the IdP layer, users interact with the Identity Provider’s standard OAuth2 consent interface, which serves as the actual authorization mechanism for data access. WoT’s consent layer acts as an enhancement wrapper around this traditional OAuth2 consent, providing multi-entity visibility and trustworthiness assessment.\n4a. Data Discovery (Optional): After consent is obtained, organizational entities may query WoT to discover what data types are available for specific users within their established relationship. WoT returns available data types based on the user’s connected data providers and the granted consent permissions, allowing entities to proactively determine data availability before requesting access. Entities that already know the specific data types they need may skip discovery and proceed directly to data access, though they will only learn of data unavailability when the access request returns an unavailable response.\n4b. Data Access Authorization: With consent in place, WoT authorizes organizational entities to access the specified user data. WoT retrieves data from user-authorized sources, validates that the requesting entity’s credentials and session are current and valid, verifies the access complies with consent parameters and relationship constraints, and securely delivers the data through end-to-end encrypted channels. Metadata of every data access operation is cryptographically logged for auditability, enabling users to review which entities accessed what data types and when, with the ability to revoke access or modify consent at any time.\nThis integrated approach ensures that trust flows seamlessly from external verification through relationship formation, consent management, and data access, enabling secure autonomous operations while maintaining cryptographic accountability and user sovereignty over their data and digital relationships."},"title":"Overview - Web of Trust"},"/videos/":{"data":{"":"","topics#Topics":"FIDO2 - Core Concepts FIDO2 Introduction 1. A brief introduction to the series FIDO2 Elements 2. The pieces that makeup FIDO FIDO2 Registration 3. The registration flow FIDO2 Authentication 4. The authentication flow FIDO2 Authenticator Elements 5. A few characteristics of an authenticator FIDO2 Security 6. A comparison of fido2 credentials and passwords "},"title":"Videos"}}