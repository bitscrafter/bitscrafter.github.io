<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bitscrafter – Blogs</title>
    <link>https://bitscrafter.com/blogs/</link>
    <description>Recent content in Blogs on Bitscrafter</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	  <atom:link href="https://bitscrafter.com/blogs/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Introduction to End to End Secure Data Transmission</title>
      <link>https://bitscrafter.com/blogs/end_to_end_secure_data_transmission/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bitscrafter.com/blogs/end_to_end_secure_data_transmission/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://bitscrafter.com/images/logo.png&#34; alt=&#34;logo&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bitscrafter.com/images/blogs/end_to_end_secure_data_transmission/banner.png&#34; alt=&#34;Banner&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Service providers and their technologies have been increasingly scrutinized by governments and the public due to the
unfortunate consequences of their security practices—or lack thereof. One critical area to secure is commonly referred
to as data-in-transit. Transmitting data over the internet, or any unsecured network, comes with inherent risks that
can&amp;rsquo;t be ignored.&lt;/p&gt;
&lt;p&gt;Unauthorized access to transmitted data is possible through an attack known as a man-in-the-middle (MITM). As the name
suggests, a malicious actor intercepts communication between two parties to gain some benefit. There are many ways these
attacks can occur; however, for brevity, we&amp;rsquo;ll assume unauthorized data access is both feasible and highly probable.&lt;/p&gt;
&lt;p&gt;The solution prevents anyone intercepting the communication from understanding or manipulating the intercepted messages,
regardless of the type of MITM attack. This is achieved using well-known cryptographic techniques that guarantee the
authenticity, integrity, and confidentiality of the transmitted messages.&lt;/p&gt;
&lt;h2&gt;The Problem&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-problem&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-problem&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The scenario in this discussion centers securing the communication across the internet between two participants. The
issue at hand is that someone other than the intended participants could access the message and benefit from this
knowledge. Below, Figure 1 illustrates a simplification of this scenario.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://bitscrafter.com/images/blogs/end_to_end_secure_data_transmission/figure1.png&#34; title=&#34;Figure 1&#34; alt=&#34;Figure 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Attackers can inject themselves into three logical places: local networks and the internet. To define a sensible
solution, we must assume no place is safe once the message leaves the application&amp;rsquo;s memory space. Vulnerabilities
can exist in any underlying protocols and technologies used to transmit the message.&lt;/p&gt;
&lt;h2&gt;The Analysis&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To solve this problem, we need a mechanism by which both ends of the communication can assert that the messages show the
following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can&amp;rsquo;t be tampered with, ensuring the original message is not read before it reaches the receiver unchanged.&lt;/li&gt;
&lt;li&gt;They are authentic, confirming the message was created by the sender and was intended for the receiver.&lt;/li&gt;
&lt;li&gt;They can’t be repudiated, meaning the participants can’t deny having sent or received them.&lt;/li&gt;
&lt;li&gt;They exhibit forward secrecy, ensuring the compromise of a secret does not compromise other message exchanges.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Making Progress&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;making-progress&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#making-progress&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let’s break down a partial solution for the first property: preventing unauthorized parties from reading or modifying
the message. Encryption can prevent unauthorized reading, while a signature or a digest can prevent tampering. However,
these primitives require a secret. Using a pre-agreed long-lived secret works, but what if it gets compromised? &lt;br&gt;
Introducing ephemerality and randomness to the secret can address this concern.&lt;/p&gt;
&lt;p&gt;Messages thus must show an additional property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They have perfect forward secrecy, meaning a compromised session key affects only the messages protected with that key
and a compromised long-lived key doesn’t affect any previously protected messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using a key exchange primitive, the Sender and Receiver can generate a common value. The output of the key exchange
should not be used as the secret itself but as input to a key derivation method that uses a pseudo-random function (PRF)
to generate the actual secret that becomes the session key.&lt;/p&gt;
&lt;p&gt;To tackle tampering and forward secrecy, a key agreement procedure using key exchange and PRF primitives is needed.
Figure 2 illustrates this idea.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://bitscrafter.com/images/blogs/end_to_end_secure_data_transmission/figure2.png&#34; title=&#34;Figure 2&#34; alt=&#34;Figure 2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;While the transmitted message is guaranteed to be protected end to end strictly speaking, the Attacker might have
intercepted the previous messages carrying the key agreement material and thus enabling the manipulation of the
procedure in a way that goes unnoticed by the Sender and Receiver. In this scenario, the Attacker effectively becomes
the Sender, the Receiver, and/or simply an intermediary that understands the communication and thus can act on it.&lt;/p&gt;
&lt;p&gt;This attack is attainable because neither the Sender nor Receiver are authenticated as the absence of long-lived keys
would suggest. Even if they each hold their ephemeral private key, the Attacker could neglect this by generating its own
ephemeral key pair impersonating the participation of the Sender or Receiver or both.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-solution&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-solution&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now, let&amp;rsquo;s address the authenticity aspect. Without authentication, the Sender and Receiver don&amp;rsquo;t know who they&amp;rsquo;re
communicating with. They must establish a trust mechanism where participants verify each other&amp;rsquo;s identity before any
interaction. This trust establishment involves exchanging:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A public key.&lt;/li&gt;
&lt;li&gt;Proof of possession of the associated private key.&lt;/li&gt;
&lt;li&gt;Key agreement procedure parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trust can be established directly (e.g., face-to-face interactions) or indirectly (e.g., through a trusted Certificate
Authority). Figure 3 describes this solution.&lt;/p&gt;
&lt;p&gt;The use of authenticity unveils a fourth desired property to messages flowing between the participants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once done, a participant cannot deny their participation in the message exchange.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is accomplished by participants demonstrating possession of a private key.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;https://bitscrafter.com/images/blogs/end_to_end_secure_data_transmission/figure3.png&#34; title=&#34;Figure 3&#34; alt=&#34;Figure 3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 3&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Participants must set up long-lived secrets in secure places like Trusted Platform Modules (TPMs) or Hardware Security
Modules (HSMs). This ensures only the intended application accesses the secret. In some contexts, it might be acceptable
for only one participant to be authenticated.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given the evolving nature of cyberattacks and increasing data privacy regulations, addressing end-to-end traffic
protection is crucial for any digital service relying on data transmission. This article presented proven industry
practices, concepts, and considerations for solving this common problem.&lt;/p&gt;
&lt;p&gt;The key security properties that data in transit must have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authenticity.&lt;/li&gt;
&lt;li&gt;Tamper Proof (Integrity and Confidentiality).&lt;/li&gt;
&lt;li&gt;Non-Repudiation.&lt;/li&gt;
&lt;li&gt;Perfect Forward Secrecy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These security properties can be achieved by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Establishing a Trust Relationship.&lt;/li&gt;
&lt;li&gt;Defining and Executing a Key Agreement Procedure.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Elaine Barker (NIST), Lily Chen (NIST), Allen Roginsky (NIST), Apostol Vassilev (NIST), Richard Davis (NSA). NIST,
&amp;ldquo;Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography&amp;rdquo;, Revision 3, April
2018, csrc.nist.gov/pubs/sp/800/56/a/r3/final&lt;/li&gt;
&lt;li&gt;Elaine Barker (NIST), Lily Chen (NIST), Richard Davis (NSA). NIST, &amp;ldquo;Recommendation for Key-Derivation Methods in
Key-Establishment Schemes&amp;rdquo;, Revision 2, August 2020, csrc.nist.gov/pubs/sp/800/56/c/r2/final&lt;/li&gt;
&lt;li&gt;Lily Chen (NIST). NIST, &amp;ldquo;Recommendation for Key Derivation Using Pseudorandom Functions&amp;rdquo;, Revision 1 Update 1, August
2022, csrc.nist.gov/pubs/sp/800/108/r1/upd1/final&lt;/li&gt;
&lt;li&gt;H. Krawczyk (IBM Research), P. Eronen (Nokia). IETF, &amp;ldquo;HMAC-based Extract-and-Expand Key Derivation Function (HKDF)&amp;rdquo;,
May 2010, datatracker.ietf.org/doc/html/rfc5869&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Disclaimer&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;disclaimer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#disclaimer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All content provided in this article is exclusively for informational purposes only. The source for the making of this
content is information of public domain as detailed in the references.&lt;/p&gt;
&lt;p&gt;The owner of this article makes no representations as to the accuracy or completeness of any information presented. The
owner will not be liable for any errors or omissions in this information nor for its availability, as well as not liable
for any losses or damages resulting from the use of this information.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Trust Bootstrapping - Establishing a Secure Foundation for Digital Interactions</title>
      <link>https://bitscrafter.com/blogs/trust_bootstrapping_secure_foundation_for_interactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bitscrafter.com/blogs/trust_bootstrapping_secure_foundation_for_interactions/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;https://bitscrafter.com/images/logo.png&#34; alt=&#34;logo&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bitscrafter.com/images/blogs/trust_bootstrapping_secure_foundation_for_interactions/banner.png&#34; alt=&#34;Banner&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In today&amp;rsquo;s dynamic cybersecurity landscape, pre-establishing trust before any interaction is essential. Trust
bootstrapping is the process that sets up a trust relationship between two or more subjects by proofing the identities
claimed by those subjects. The sensitivity of the data or transactions between these subjects dictates the stringency of
the trust establishment process.&lt;/p&gt;
&lt;h2&gt;The Problem&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-problem&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-problem&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When two subjects initiate an interaction requiring a certain level of confidence, merely authenticating them might not
suffice. The true identity of the subjects becomes crucial. Are they genuinely who they claim to be?&lt;/p&gt;
&lt;h2&gt;The Analysis&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Trust is essential for secure interactions. Before any sensitive data exchange or transaction, trust must be established
to ensure all parties can interact confidently without fear of unauthorized access or tampering.&lt;/p&gt;
&lt;p&gt;Trust bootstrapping involves several steps to create a secure and reliable trust relationship:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Identity Proofing: Collect evidence to validate and verify the trustworthiness of a subject.&lt;/li&gt;
&lt;li&gt;Digital Credential Creation: Create a digital credential, associated to the proofed identity, to facilitate future&lt;/li&gt;
&lt;li&gt;identification of the subject.&lt;/li&gt;
&lt;li&gt;Trust Relationship Formalization: Exchange public credentials to establish the trust relationship between subjects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Bootstrapping Process&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;the-bootstrapping-process&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-bootstrapping-process&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Trust bootstrapping, or trust establishment, is a universal concept used in well-established technologies like TLS, Key
Agreement, API, as well as emerging ones such as UEFI, FIDO2, and Verifiable Credentials. For example, bootstrapping in
TLS might involve adding root certificates to a trust store, while in an API authentication, it might involve storing
public keys or secrets in a data repository.&lt;/p&gt;
&lt;p&gt;The bootstrapping process starts with identity proofing, which involves collecting identity evidence to validate and
verify it. This evidence can be any official document, physical or digital, that asserts the subject&amp;rsquo;s identity
attributes. The issuer of this evidence becomes the anchor of trust, meaning the subject&amp;rsquo;s identity is as trustworthy
as the issuer. Examples of such entities include governments, educational institutions, and certificate authorities.
Validation checks that the evidence meets the requirements for its type, such as ensuring a passport includes all
expected data and is correctly formatted. Verification ensures the subject undergoing identity proofing matches the
subject described in the evidence.&lt;/p&gt;
&lt;p&gt;Once the identity is verified, the next step is creating a credential that binds the verified identity with an
authenticator and, generally, cryptographic material. When the bootstrapping is complete, this credential is used to
exercise trust in future interactions. Successful authentications indicate the subject with the verified identity is
behind the interaction.&lt;/p&gt;
&lt;p&gt;The final step defines the characteristics of the relationship, including the participant subjects, the required
identity assurance level, whether trust is required from both subjects or only one, etc.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Trust bootstrapping is critical for creating secure digital environments. By verifying identities, managing trusted
credentials, and establishing robust trust relationships, we can ensure safe and reliable interactions. As cyber threats
evolve, trust bootstrapping will remain a cornerstone of cybersecurity strategies, enabling secure communication and
transactions in an increasingly connected world.&lt;/p&gt;
&lt;h2&gt;References&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;David Temoshok (NIST), Diana Proud-Madruga (Electrosoft), Yee-Yin Choong (NIST), Ryan Galluzzo (NIST), Sarbari Gupta
(Electrosoft), Connie LaSalle (NIST), Naomi Lefkovitz (NIST), Andrew Regenscheid (NIST), &amp;ldquo;Digital Identity
Guidelines&amp;rdquo;, Revision 4, 2nd Public Draft, 21 August 2024, csrc.nist.gov/pubs/sp/800/63/4/2pd&lt;/li&gt;
&lt;li&gt;T. Lodderstedt (sprind.org), D. Fett (Authlete), M. Haine (Considrd.Consulting Ltd), A. Pulido (Santander), K. Lehmann
(1&amp;amp;1 Mail &amp;amp; Media Development &amp;amp; Technology GmbH), K. Koiwai (KDDI Corporation), &amp;ldquo;OpenID Connect for Identity Assurance
1.0&amp;rdquo;, 1 October 2024, openid.net/specs/openid-connect-4-identity-assurance-1_0.html&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Disclaimer&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;disclaimer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#disclaimer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All content provided in this article is for informational purposes only. The source of this content is public domain
information as detailed in the references. The owner makes no representations regarding the accuracy or completeness of
the information presented. The owner will not be liable for any errors or omissions in this information or its
vailability, nor for any losses or damages resulting from its use.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
